
// alert('ryan')

// let age=23;

// //console.log(age)

// document.write(age)

// // JavaScript Let

// //var lets you redeclared varibles 
// var x =0;

// var x = 2;

// //Scope	    Redeclare	Reassign	Hoisted	Binds this
// // var	    No	        Yes	        Yes	Yes	Yes
// // let	    Yes	        No	        Yes	No	No
// // const	Yes	        No	        No	No	No

// // The const keyword was introduced in ES6 (2015)

// // Variables defined with const cannot be Redeclared

// // Variables defined with const cannot be Reassigned

// // Variables defined with const have Block Scope

// const PI = 3.141592653589793;
// PI = 3.14;      // This will give an error
// PI = PI + 10; // This will also give an error

// // const PI = 3.14159265359; // this is right for js

// // const PI;//Incorrect
// PI = 3.14159265359; //Incorrect

// // Constant Arrays

// // You can create a constant array:
// const cars = ["Saab", "Volvo", "BMW"];

// // You can change an element:
// cars[0] = "Toyota";

// // You can add an element:
// cars.push("Audi");

// //But can't reassign array
// const cars = ["Saab", "Volvo", "BMW"];

// cars = ["Toyota", "Volvo", "Audi"];    // ERROR

// //Constant Objects

// // You can create a const object:
// const car = {type:"Fiat", model:"500", color:"white"};

// // You can change a property:
// car.color = "red";

// // You can add a property:
// // car.owner = "Johnson";

// // But you can NOT reassign the object:

// // Example
// // const car = {type:"Fiat", model:"500", color:"white"};

// // car = {type:"Volvo", model:"EX60", color:"red"};// ERROR

// // JavaScript Operators

// // Examples:
// // The Assignment Operator = assigns values

// // The Addition Operator + adds values

// // The Multiplication Operator * multiplies values

// // The Comparison Operator > compares values

// // Assign the value 5 to x
// // let x = 5;
// // Assign the value 2 to y
// // let y = 2;
// // Assign the value x + y to z:
// // let z = x + y;

// // JavaScript Arithmetic Operators

// // Operator	Description
// // +	        Addition
// // -	        Subtraction
// // *	        Multiplication
// // **	        Exponentiation (ES2016)
// // /	        Division
// // %	        Modulus (Remainder)
// // ++	        Increment
// // --	        Decrement

// //These are the operators that you are going to use for numbers (literals or varibles)


// // Operators and Operands
// // The numbers (in an arithmetic operation) are called operands.

// // The operation (to be performed between the two operands) is defined by an operator.

// // Operand	Operator	Operand
// //   100	    +	       50

// // JavaScript Assignment Operators
// // Assignment operators assign values to JavaScript variables.

// // Operator	    Example	        Same As
// // =	        x = y	        x = y
// // +=	        x += y	        x = x + y
// // -=	        x -= y	        x = x - y
// // *=	        x *= y	        x = x * y
// // /=	        x /= y	        x = x / y
// // %=	        x %= y	        x = x % y
// // **=	        x **= y	        x = x ** y

// // JavaScript Data Types

// // // Numbers:
// // let length = 16;
// // let weight = 7.5;

// // // Strings:
// // let color = "Yellow";
// // let lastName = "Johnson";

// // // Booleans
// // let x = true;
// // let y = false;

// // // Object:
// // const person = {firstName:"John", lastName:"Doe"};

// // // Array object:
// // const cars = ["Saab", "Volvo", "BMW"];

// // // Date object:
// // const date = new Date("2022-03-25");

// // JavaScript Types are Dynamic
// // JavaScript has dynamic types. This means that the same variable can be used to hold different data types:
// // let x;       // Now x is undefined
// // x = 5;       // Now x is a Number
// // x = "John";  // Now x is a String

// // You can use single or double quotes for Strings
// // "" or ''

// // You can also use decimals not more going back and forth with doubles and ints or float
// // // With decimals:
// // let x1 = 34.00;

// // // Without decimals:
// // let x2 = 34;

// //Or if you want to get really precise with it you can do this 

// // let y = 123e5;    // 12300000
// // let z = 123e-5;   // 0.00123

// // JavaScript BigInt

// //So BigInts are Ints that can hold up to 64 numbers inside 

// //let x = BigInt("123456789012345678901234567890");

// // JavaScript Booleans
// // Booleans can only have two values: true or false.

// // Example
// // let x = 5;
// // let y = 5;
// // let z = 6;
// // (x == y)       // Returns true
// // (x == z
// // Boolean have recived no change they are still true or false

// // JavaScript Objects
// // JavaScript objects are written with curly braces {}.

// // Object properties are written as name:value pairs, separated by commas.

// // Example
// // const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

// // The typeof Operator
// // You can use the JavaScript typeof operator to find the type of a JavaScript variable.

// // The typeof operator returns the type of a variable or an expression:

// // Example
// // typeof ""             // Returns "string"
// // typeof "John"         // Returns "string"
// // typeof "John Doe"     // Returns "string"

// // typeof 0              // Returns "number"
// // typeof 314            // Returns "number"
// // typeof 3.14           // Returns "number"
// // typeof (3)            // Returns "number"
// // typeof (3 + 4)        // Returns "number"

// // Undefined - Is closest to unknown 

// // In JavaScript, a variable without a value, has the value undefined. The type is also undefined.

// // let car;    // Value is undefined, type is undefined

// // car = undefined;    // Value is undefined, type is undefined

// // Empty Values

// // An empty value has nothing to do with undefined.

// // An empty string has both a legal value and a type.
// // let car = "";    // The value is "", the typeof is "string"

// //fuctions is the "method" for js 

// // Function to compute the product of p1 and p2
// // function myFunction(p1, p2) {
// //     return p1 * p2;
// //   }

// // Function Return
// // When JavaScript reaches a return statement, the function will stop executing.

// // If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.

// // Functions often compute a return value. The return value is "returned" back to the "caller":

// // Function is called, the return value will end up in x
// // let x = myFunction(4, 3);

// // function myFunction(a, b) {
// // // Function returns the product of a and b
// //   return a * b;
// // }

// // The () Operator
// // The () operator invokes (calls) the function:

//  // Convert Fahrenheit to Celsius:

// // function toCelsius(fahrenheit) {
// //   return (5/9) * (fahrenheit-32);
// // }

// // let value = toCelsius(77);


// // JavaScript Objects

// //Using the new Keyword
// // This example create a new JavaScript object using new Object(), and then adds 4 properties:

// // Example
// // // Create an Object
// // const person = new Object();

// // // Add Properties
// // person.firstName = "John";
// // person.lastName = "Doe";
// // person.age = 50;
// // person.eyeColor = "blue";

// // JavaScript Object Properties
// // An Object is an Unordered Collection of Properties
// // Properties are the most important part of JavaScript objects.

// // Properties can be changed, added, deleted, and some are read only.

// // Accessing JavaScript Properties
// // The syntax for accessing the property of an object is:

// // // objectName.property
// // let age = person.age;
// // or

// // //objectName["property"]
// // let age = person["age"];
// // or

// // //objectName[expression]
// // let age = person[x];
// // Examples
// // person.firstname + " is " + person.age + " years old.";
// // person["firstname"] + " is " + person["age"] + " years old.";
// // let x = "firstname";
// // let y = "age";
// // person[x] + " is " + person[y] + " years old.";
// // Adding New Properties
// // You can add new properties to an existing object by simply giving it a value:

// // Example
// // person.nationality = "English";
// // Deleting Properties
// // The delete keyword deletes a property from an object:

// // Example
// // const person = {
// //   firstName: "John",
// //   lastName: "Doe",
// //   age: 50,
// //   eyeColor: "blue"
// // };

// // delete person.age;
// // or delete person["age"];

// // Example
// // const person = {
// //   firstName: "John",
// //   lastName: "Doe",
// //   age: 50,
// //   eyeColor: "blue"
// // };

// // delete person["age"];

// // Nested Objects
// // Property values in an object can be other objects:

// // Example
// // myObj = {
// //   name:"John",
// //   age:30,
// //   myCars: {
// //     car1:"Ford",
// //     car2:"BMW",
// //     car3:"Fiat"
// //   }
// // }

// // You can access nested objects using the dot notation or the bracket notation:

// // myObj.myCars.car2;
// // myObj.myCars["car2"];
// // myObj["myCars"]["car2"];
// // let p1 = "myCars";
// // let p2 = "car2";
// // myObj[p1][p2];

// // JavaScript Object Methods
// // Object methods are actions that can be performed on objects.

// // A method is a function definition stored as a property value.

// // Property	    Value
// // firstName	John
// // lastName	    Doe
// // age	        50
// // eyeColor	    blue
// // fullName	    function() {return this.firstName + " " + this.lastName;}

// // const person = {
// //     firstName: "John",
// //     lastName: "Doe",
// //     id: 5566,
// //     fullName: function() {
// //       return this.firstName + " " + this.lastName;
// //     }
// //   };

// // In the example above, this refers to the person object:

// // this.firstName means the firstName property of person.

// // this.lastName means the lastName property of person.

// // Accessing Object Methods
// // You access an object method with the following syntax:

// // objectName.methodName()
// // If you invoke the fullName property with (), it will execute as a function:

// //  name = person.fullName();

// // If you access the fullName property without (), it will return the function definition:

// // JavaScript Object Methods

// // Object methods are actions that can be performed on objects.

// // A method is a function definition stored as a property value.

// // Property	Value
// // firstName	John
// // lastName	Doe
// // age	50
// // eyeColor	blue
// // fullName	function() {return this.firstName + " " + this.lastName;}

// // Example
// // name = person.fullName;

// // Adding a Method to an Object
// // Adding a new method to an object is easy:

// // person.name = function () {
// //   return this.firstName + " " + this.lastName;
// // }

// // Using JavaScript Methods
// // This example uses the JavaScript toUpperCase() method to convert a text to uppercase:

// //  person.name = function () {
// //   return (this.firstName + " " + this.lastName).toUpperCase();
// // };


// // How to Display JavaScript Objects?
// // Displaying a JavaScript object will output [object Object].

// // Example
// // // Create an Object
// // const person = {
// //   name: "John",
// //   age: 30,
// //   city: "New York"
// // };

// // document.getElementById("demo").innerHTML = person;

// // Some solutions to display JavaScript objects are:

// // Displaying the Object Properties by name
// // Displaying the Object Properties in a Loop
// // Displaying the Object using Object.values()
// // Displaying the Object using JSON.stringify()

// // Displaying Object Properties
// // The properties of an object can be displayed as a string:

//  // // Create an Object
// // const person = {
// //   name: "John",
// //   age: 30,
// //   city: "New York"
// // };

// // // Display Properties
// // document.getElementById("demo").innerHTML =
// // person.name + "," + person.age + "," + person.city;


// // Displaying Properties in a Loop
// // The properties of an object can be collected in a loop:

//  // // Create an Object
// // const person = {
// //   name: "John",
// //   age: 30,
// //   city: "New York"
// // };

// // // Build a Text
// // let text = "";
// // for (let x in person) {
// //   text += person[x] + " ";
// // };

// // // Display the Text
// // document.getElementById("demo").innerHTML = text;

// // JavaScript Object Constructors

// // Object Constructor Functions
// // Sometimes we need to create many objects of the same type.

// // To create an object type we use an object constructor function.

// // It is considered good practice to name constructor functions with an upper-case first letter.

// // Object Type Person
// // function Person(first, last, age, eye) {
// //   this.firstName = first;
// //   this.lastName = last;
// //   this.age = age;
// //   this.eyeColor = eye;
// // }

// // Now we can use new Person() to create many new Person objects:

//  // const myFather = new Person("John", "Doe", 50, "blue");
// // const myMother = new Person("Sally", "Rally", 48, "green");
// // const mySister = new Person("Anna", "Rally", 18, "green");

// // const mySelf = new Person("Johnny", "Rally", 22, "green");

// // Common HTML Events
// // Here is a list of some common HTML events:

// // Event	Description
// // onchange	An HTML element has been changed
// // onclick	The user clicks an HTML element
// // onmouseover	The user moves the mouse over an HTML element
// // onmouseout	The user moves the mouse away from an HTML element
// // onkeydown	The user pushes a keyboard key
// // onload	The browser has finished loading the page

// // Basic String Methods
// // Javascript strings are primitive and immutable: All string methods produce a new string without altering the original string.

// // String length
// // String charAt()
// // String charCodeAt()
// // String at()
// // String [ ]
// // String slice()
// // String substring()
// // String substr()
// // See Also:
// // String Search Methods
// // String Templates
// // String toUpperCase()
// // String toLowerCase()
// // String concat()
// // String trim()
// // String trimStart()
// // String trimEnd()
// // String padStart()
// // String padEnd()
// // String repeat()
// // String replace()
// // String replaceAll()
// // String split()

// // JavaScript String Length
// // The length property returns the length of a string:

// // Example
// // let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
// // let length = text.length;

// // Extracting String Characters
// // There are 4 methods for extracting string characters:

// // The at(position) Method
// // The charAt(position) Method
// // The charCodeAt(position) Method
// // Using property access [] like in arrays

// // JavaScript String charAt()
// // The charAt() method returns the character at a specified index (position) in a string:

// // Example
// // let text = "HELLO WORLD";
// // let char = text.charAt(0);

// // JavaScript String charCodeAt()
// // The charCodeAt() method returns the code of the character at a specified index in a string:

// // The method returns a UTF-16 code (an integer between 0 and 65535).

// // Example
// // let text = "HELLO WORLD";
// // let char = text.charCodeAt(0);

// // JavaScript String at()
 
// // Examples
// // Get the third letter of name:

// // const name = "W3Schools";
// // let letter = name.at(2);

// // JavaScript String Search
// // String Search Methods
// // String indexOf()
// // String lastIndexOf()
// // String search()
// // See Also:
// // Basic String Methods
// // String Templates

// // JavaScript String indexOf()
// // The indexOf() method returns the index (position) of the first occurrence of a string in a string, or it returns -1 if the string is not found:

// // let text = "Please locate where 'locate' occurs!";
// // let index = text.indexOf("locate");

// // Multiline Strings
// // Template Strings allow multiline strings:

//  // let text =
// // `The quick
// // brown fox
// // jumps over
// // the lazy dog`;

// // Interpolation
// // Template String provide an easy way to interpolate variables and expressions into strings.

// // The method is called string interpolation.

// // The syntax is:

// // ${...}

// // JavaScript Number Methods
// // These number methods can be used on all JavaScript numbers:

// // Method	Description
// // toString()	Returns a number as a string
// // toExponential()	Returns a number written in exponential notation
// // toFixed()	Returns a number written with a number of decimals
// // toPrecision()	Returns a number written with a specified length
// // valueOf()	Returns a number as a number

// // The toExponential() Method
// // toExponential() returns a string, with a number rounded and written using exponential notation.

// // A parameter defines the number of characters behind the decimal point:

// // let x = 9.656;
// // x.toExponential(2);
// // x.toExponential(4);
// // x.toExponential(6);

// // The parameter is optional. If you don't specify it, JavaScript will not round the number.

// // The toFixed() Method
// // toFixed() returns a string, with the number written with a specified number of decimals:

// // Example
// // let x = 9.656;
// // x.toFixed(0);
// // x.toFixed(2);
// // x.toFixed(4);
// // x.toFixed(6);
// // toFixed(2) is perfect for working with money.

// // The toPrecision() Method
// // toPrecision() returns a string, with a number written with a specified length:

//  // let x = 9.656;
// // x.toPrecision();
// // x.toPrecision(2);
// // x.toPrecision(4);
// // x.toPrecision(6);

// // The valueOf() Method
// // valueOf() returns a number as a number.

// //  let x = 123;
// // x.valueOf();
// // (123).valueOf();
// // (100 + 23).valueOf();

// // Converting Variables to Numbers
// // There are 3 JavaScript methods that can be used to convert a variable to a number:

// // Method	Description
// // Number()	Returns a number converted from its argument.
// // parseFloat()	Parses its argument and returns a floating point number
// // parseInt()	Parses its argument and returns a whole number

// // The Number() Method
// // The Number() method can be used to convert JavaScript variables to numbers:

// // Example
// // Number(true);
// // Number(false);
// // Number("10");
// // Number("  10");
// // Number("10  ");
// // Number(" 10  ");
// // Number("10.33");
// // Number("10,33");
// // Number("10 33");
// // Number("John");

// // The Number() Method Used on Dates
// // Number() can also convert a date to a number.

//  // Number(new Date("1970-01-01"))

//  //Fun fact -The Date() method returns the number of milliseconds since 1.1.1970.

// //  Number Object Methods
// //  These object methods belong to the Number object:
 
// //  Method	Description
// //  Number.isInteger()	Returns true if the argument is an integer
// //  Number.isSafeInteger()	Returns true if the argument is a safe integer
// //  Number.parseFloat()	Converts a string to a number
// //  Number.parseInt()	Converts a string to a whole number

// // The Number.isSafeInteger() Method
// // A safe integer is an integer that can be exactly represented as a double precision number.

// // The Number.isSafeInteger() method returns true if the argument is a safe integer.

// // Number.isSafeInteger(10);
// // Number.isSafeInteger(12345678901234567890);

// // JavaScript Number Properties
// // Property 	        Description
// // EPSILON	            The difference between 1 and the smallest number > 1.
// // MAX_VALUE	        The largest number possible in JavaScript
// // MIN_VALUE	        The smallest number possible in JavaScript
// // MAX_SAFE_INTEGER	    The maximum safe integer (253 - 1)
// // MIN_SAFE_INTEGER	    The minimum safe integer -(253 - 1)
// // POSITIVE_INFINITY	Infinity (returned on overflow)
// // NEGATIVE_INFINITY	Negative infinity (returned on overflow)
// // NaN	A "Not-a-Number" value

// JavaScript Arrays

// Converting an Array to a String
// The JavaScript method toString() converts an array to a string of (comma separated) array values.

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// document.getElementById("demo").innerHTML = fruits.toString();
// Result:

// Banana,Orange,Apple,Mango

// Changing an Array Element
// This statement changes the value of the first element in cars:

// cars[0] = "Opel";
// Example
// const cars = ["Saab", "Volvo", "BMW"];
// cars[0] = "Opel";

// Access the Full Array
// With JavaScript, the full array can be accessed by referring to the array name:

// Example
// const cars = ["Saab", "Volvo", "BMW"];
// document.getElementById("demo").innerHTML = cars;

// Arrays are Objects
// Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.

// But, JavaScript arrays are best described as arrays.

// Arrays use numbers to access its "elements". In this example, person[0] returns John:

// Array:
// const person = ["John", "Doe", 46];

// Array Properties and Methods
// The real strength of JavaScript arrays are the built-in array properties and methods:

// cars.length   // Returns the number of elements
// cars.sort()   // Sorts the array
 
// Looping Array Elements
// One way to loop through an array, is using a for loop:

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// let fLen = fruits.length;

// let text = "<ul>";
// for (let i = 0; i < fLen; i++) {
//   text += "<li>" + fruits[i] + "</li>";
// }
// text += "</ul>";
// You can also use the Array.forEach() function:

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];

// let text = "<ul>";
// fruits.forEach(myFunction);
// text += "</ul>";

// function myFunction(value) {
//   text += "<li>" + value + "</li>";
// }
// Adding Array Elements
// The easiest way to add a new element to an array is using the push() method:

// Example
// const fruits = ["Banana", "Orange", "Apple"];
// fruits.push("Lemon");  // Adds a new element (Lemon) to fruits
// New element can also be added to an array using the length property:

// Example
// const fruits = ["Banana", "Orange", "Apple"];
// fruits[fruits.length] = "Lemon";  // Adds "Lemon" to fruits

// The Difference Between Arrays and Objects
// In JavaScript, arrays use numbered indexes.  

// In JavaScript, objects use named indexes.

// Arrays are a special kind of objects, with numbered indexes.

// When to Use Arrays. When to use Objects.
// JavaScript does not support associative arrays.
// You should use objects when you want the element names to be strings (text).
// You should use arrays when you want the element names to be numbers.

// Nested Arrays and Objects
// Values in objects can be arrays, and values in arrays can be objects:

// Example
// const myObj = {
//   name: "John",
//   age: 30,
//   cars: [
//     {name:"Ford", models:["Fiesta", "Focus", "Mustang"]},
//     {name:"BMW", models:["320", "X3", "X5"]},
//     {name:"Fiat", models:["500", "Panda"]}
//   ]
// }

// To access arrays inside arrays, use a for-in loop for each array:

// Example
// for (let i in myObj.cars) {
//   x += "<h1>" + myObj.cars[i].name + "</h1>";
//   for (let j in myObj.cars[i].models) {
//     x += myObj.cars[i].models[j];
//   }
// }

// Popping and Pushing Arrays
// When you work with arrays, it is easy to remove elements and add new elements.

// This is what popping and pushing is:

// Popping items out of an array, or pushing items into an array.

// JavaScript Array pop()
// The pop() method removes the last element from an array:

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.pop();
// The pop() method returns the value that was "popped out":

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// let fruit = fruits.pop();
// JavaScript Array push()
// The push() method adds a new element to an array (at the end):

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.push("Kiwi");
// The push() method returns the new array length:

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// let length = fruits.push("Kiwi");

// Changing Elements
// Array elements are accessed using their index number:

// Array indexes start with 0:

// [0] is the first array element
// [1] is the second
// [2] is the third ...

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits[0] = "Kiwi";


// JavaScript Array indexOf()
// The indexOf() method searches an array for an element value and returns its position.

// Note: The first item has position 0, the second item has position 1, and so on.

// Example
// Search an array for the item "Apple":

// const fruits = ["Apple", "Orange", "Apple", "Mango"];
// let position = fruits.indexOf("Apple") + 1;

// Syntax
// array.indexOf(item, start)
// item	Required. The item to search for.
// start	Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.
// Array.indexOf() returns -1 if the item is not found.

// If the item is present more than once, it returns the position of the first occurrence.

// JavaScript Sorting Arrays

// Array Sort          Methods
// Alphabetic          Sort
// Array sort()
// Array reverse()
// Array toSorted()
// Array toReversed()
// Sorting Objects

// Basic Methods
// Search Methods
// Iteration Methods	
// Numeric Sort
// Numeric Sort
// Random Sort
// Math.min()
// Math.max()
// Home made Min()
// Home made Max()

// Sorting an Array
// The sort() method sorts an array alphabetically:

// Example
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.sort();

